import streamlit as st
import sqlite3
import hashlib
from datetime import datetime
from streamlit_cookies_manager import EncryptedCookieManager

# Cookie manager inicializ√°l√°sa (v√°lassz er≈ës jelsz√≥t, itt csak p√©lda)
cookies = EncryptedCookieManager(prefix="planttracker_", password="egy-er≈ës-es-minimum-16-karakteres-jelszo")

if not cookies.ready():
    # V√°runk, am√≠g a cookie manager be√°ll√≠t√°sra ker√ºl
    st.stop()

# ---------- ADATB√ÅZIS FUNKCI√ìK ----------
def create_users_table():
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            password TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_user(username, password):
    hashed_pw = hash_password(password)
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_pw))
    conn.commit()
    conn.close()

def get_user(username):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE username = ?", (username,))
    user = cur.fetchone()
    conn.close()
    return user

# ---------- SEG√âDF√úGGV√âNYEK ----------
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def verify_password(input_password, stored_password):
    return hash_password(input_password) == stored_password

# ---------- COOKIE-VAL KOMPATIBILIS SESSION KEZEL√âS ----------

def init_session_from_cookies():
    # Be√°ll√≠tjuk a session_state-et cookie alapj√°n, ha van bejelentkezve felhaszn√°l√≥
    if cookies.get("authenticated") == "true":
        st.session_state["authenticated"] = True
        st.session_state["username"] = cookies.get("username")
    else:
        st.session_state["authenticated"] = False
        st.session_state["username"] = None

def login_user(username):
    st.session_state["authenticated"] = True
    st.session_state["username"] = username
    cookies["authenticated"] = "true"
    cookies["username"] = username
    cookies.save()

def logout_user():
    st.session_state["authenticated"] = False
    st.session_state["username"] = None
    cookies["authenticated"] = None
    cookies["username"] = None
    cookies.save()

def init_session():
    if "authenticated" not in st.session_state or "username" not in st.session_state:
        init_session_from_cookies()
    create_users_table()

# ---------- BEJELENTKEZ√âS √âS REGISZTR√ÅCI√ì ----------
def show_login():
    tabs = st.tabs(["Bejelentkez√©s", "Regisztr√°ci√≥"])

    with tabs[0]:
        st.subheader("Bejelentkez√©s")
        username = st.text_input("Felhaszn√°l√≥n√©v", key="login_user")
        password = st.text_input("Jelsz√≥", type="password", key="login_pass")
        if st.button("Bejelentkez√©s"):
            user = get_user(username)
            if user and verify_password(password, user[2]):
                login_user(username)   # itt m√°r a cookie-ba is ment√ºnk
                st.success(f"Szia, {username}! Sikeresen bejelentkezt√©l.")
                st.rerun()
            else:
                st.error("√ârv√©nytelen felhaszn√°l√≥n√©v vagy jelsz√≥.")

    with tabs[1]:
        st.subheader("Regisztr√°ci√≥")
        new_user = st.text_input("√öj felhaszn√°l√≥n√©v", key="reg_user")
        new_pass = st.text_input("√öj jelsz√≥", type="password", key="reg_pass")
        if st.button("Regisztr√°ci√≥"):
            if get_user(new_user):
                st.warning("A felhaszn√°l√≥n√©v m√°r foglalt.")
            elif new_user and new_pass:
                add_user(new_user, new_pass)
                st.success("Sikeres regisztr√°ci√≥! K√©rlek, jelentkezz be.")
            else:
                st.warning("K√©rlek, adj meg felhaszn√°l√≥nevet √©s jelsz√≥t.")

# ---------- F≈êOLDAL, A KERTI N√ñV√âNYEK KEZEL√âSE ----------
def show_dashboard():
    from database import (
        create_plant_table, add_plant, get_user_plants,
        delete_plant, update_last_watered, get_plants_due_today
    )
    create_plant_table()

    st.success(f"Bejelentkezve: {st.session_state['username']}")
    st.header("N√∂v√©nykezel≈ë Fel√ºlet")

    username = st.session_state["username"]

    due_today_plants = get_plants_due_today(username)
    if due_today_plants:
        st.markdown("### ‚ö†Ô∏è Ma √∂nt√∂zend≈ë n√∂v√©nyeid:")
        for plant in due_today_plants:
            st.write(f"üåø **{plant[2]}** (utolj√°ra √∂nt√∂zve: {plant[4]})")
        st.markdown("---")
    else:
        st.info("Ma egy n√∂v√©nyt sem kell √∂nt√∂zni. Sz√©p napot! üåû")

    with st.expander("√öj n√∂v√©ny hozz√°ad√°sa"):
        with st.form("add_plant_form"):
            plant_name = st.text_input("N√∂v√©ny neve", key="new_plant_name")
            frequency = st.number_input("√ñnt√∂z√©s gyakoris√°ga (napokban)", min_value=1, max_value=365, step=1, key="new_plant_freq")
            submitted = st.form_submit_button("N√∂v√©ny hozz√°ad√°sa")
            if submitted:
                if plant_name.strip() == "":
                    st.warning("K√©rlek, add meg a n√∂v√©ny nev√©t.")
                else:
                    add_plant(username, plant_name.strip(), int(frequency))
                    st.success(f"Hozz√°adva: {plant_name.strip()}")
                    st.rerun()

    plants = get_user_plants(username)
    if not plants:
        st.info("M√©g nincs hozz√°adott n√∂v√©nyed. Haszn√°ld a fenti ≈±rlapot!")
        return
    
    plants_list = [
        {
            "id": p[0],
            "name": p[2],
            "frequency_days": p[3],
            "last_watered": p[4],
        }
        for p in plants
    ]

    due_plants = get_plants_due_today(username)
    due_ids = [p[0] for p in due_plants]

    st.subheader("N√∂v√©nyeid")
    for plant in plants_list:
        plant_id = plant["id"]
        due = plant_id in due_ids

        cols = st.columns([4, 2, 2, 2, 1])
        with cols[0]:
            st.write(f"üåø **{plant['name']}**")
        with cols[1]:
            st.write(f"Minden {plant['frequency_days']} nap")
        with cols[2]:
            st.write(f"Utols√≥ √∂nt√∂z√©s: {plant['last_watered']}")
        with cols[3]:
            if due:
                st.markdown("**‚ö†Ô∏è √ñnt√∂zni kell!**")
            else:
                st.markdown("‚úÖ Rendben van")

        with cols[4]:
            if st.button("üóëÔ∏è", key=f"del_{plant_id}"):
                delete_plant(plant_id, username)
                st.success(f"T√∂r√∂lve: {plant['name']}")
                st.rerun()
            if st.button("üíß", key=f"water_{plant_id}"):
                update_last_watered(plant_id, username)
                st.success(f"√ñnt√∂zve: {plant['name']}")
                st.rerun()

    if st.button("Kijelentkez√©s"):
        logout_user()
        st.rerun()